module router_fsm_tb;
reg clock,resetn,pkt_valid,parity_done,soft_reset_0,soft_reset_1,soft_reset_2,fifo_full,
                        low_pkt_valid,fifo_empty_0,fifo_empty_1,fifo_empty_2;
 reg[1:0]data_in;
 wire busy,detect_add,ld_state,laf_state,full_state,write_enb_reg,rst_int_reg,lfd_state;

router_fsm DUT( clock,resetn,pkt_valid,parity_done,soft_reset_0,soft_reset_1,soft_reset_2,fifo_full,
                        low_pkt_valid,fifo_empty_0,fifo_empty_1,fifo_empty_2,data_in,
                   busy,detect_add,ld_state,laf_state,full_state,write_enb_reg,rst_int_reg,lfd_state);
initial
begin
   clock=0;
 forever #5 clock=~clock;
end


task rst_t;
begin
@(negedge clock);
  resetn=1'b0;
@(negedge clock);
  resetn=1'b1;
end
endtask


task t1(input[1:0]m);
begin
@(negedge clock);
data_in=m;
pkt_valid=1'b1;
fifo_empty_0=1'b1;
begin
@(negedge clock);
fifo_full=1'b0;
pkt_valid=1'b0;
end

end
endtask


task t2(input[1:0]m);
begin
@(negedge clock);
data_in=m;
pkt_valid=1'b1;
fifo_empty_0=1'b1;
begin
@(negedge clock);
fifo_full=1'b0;
pkt_valid=1'b0;
end
repeat(2)
@(negedge clock);
fifo_full=1'b1;
repeat(2)
@(negedge clock);
fifo_full=1'b0;
parity_done=1'b1;
end
endtask


task t3(input[1:0]m);
begin
@(negedge clock);
data_in=m;
pkt_valid=1'b1;
fifo_empty_0=1'b1;
begin
@(negedge clock);
fifo_full=1'b1;
end
repeat(2)
@(negedge clock);
fifo_full=1'b0;

//@(negedge clock);
low_pkt_valid=1'b1;
parity_done=1'b0;
pkt_valid=1'b0;


end
endtask


task t4(input[1:0]m);
begin
@(negedge clock);
data_in=m;
pkt_valid=1'b1;
fifo_empty_0=1'b1;
begin
@(negedge clock);
fifo_full=1'b1;
end
repeat(2)
@(negedge clock);
fifo_full=1'b0;

//@(negedge clock);
low_pkt_valid=1'b0;
parity_done=1'b0;
pkt_valid=1'b0;


end
endtask

initial
begin
 rst_t;
 t1(2'b00);
 #60;
 rst_t;
 t2(2'b00);
 #70;
 rst_t;
 t3(2'b00);
 #70;
 rst_t;
 t4(2'b00);


 
#100 $finish;
end
endmodule
