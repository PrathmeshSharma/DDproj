module router_fsm(input clock,resetn,pkt_valid,parity_done,soft_reset_0,soft_reset_1,soft_reset_2,fifo_full,
                        low_pkt_valid,fifo_empty_0,fifo_empty_1,fifo_empty_2,
                  input[1:0]data_in,
                  output reg busy,detect_add,ld_state,laf_state,full_state,write_enb_reg,rst_int_reg,lfd_state);

parameter DECODE_ADDRESS=3'b000,
          LOAD_FIRST_DATA=3'b001,
          LOAD_DATA=3'b010,
          LOAD_PARITY=3'b011,
          FIFO_FULL_STATE=3'b100,
          LOAD_AFTER_FULL=3'b101,
          WAIT_TILL_EMPTY=3'b110,
          CHECK_PARITY_ERROR=3'b111;

reg[2:0]ps,ns;

//==================================present state logic=======================================
always@(posedge clock)
  begin
    if(!resetn || soft_reset_0 || soft_reset_1 || soft_reset_2)
      ps<=DECODE_ADDRESS;
    else
      ps<=ns;
  end

//==================================next state logic=======================================
always@(*)
 begin
   case(ps)
DECODE_ADDRESS:
               begin
                  detect_add = 1;
                  rst_int_reg=1'b0;
                  lfd_state=1'b0;
                  busy=1'b0;
                  ld_state=1'b0;
                  laf_state=1'b0;
                  write_enb_reg=1'b0;
                  full_state=1'b0;
               
                 if  ((pkt_valid && (data_in[1:0]==0) && fifo_empty_0) ||
                       (pkt_valid && (data_in[1:0]==1) && fifo_empty_1) ||
                        (pkt_valid && (data_in[1:0]==2) && fifo_empty_2))
                    ns=LOAD_FIRST_DATA;
                 else if((pkt_valid && (data_in[1:0]==0) && (!fifo_empty_0)) ||
                         (pkt_valid && (data_in[1:0]==1) && (!fifo_empty_1)) ||
                         (pkt_valid && (data_in[1:0]==2) && (!fifo_empty_2)))
                    ns=WAIT_TILL_EMPTY;
                 else
                    ns=DECODE_ADDRESS;
                 
                end
LOAD_FIRST_DATA:
                begin
                   lfd_state=1'b1;
                   busy=1'b1;
                   detect_add = 0;
                   laf_state=1'b0;
                   ns=LOAD_DATA;
                 end

LOAD_DATA:
                begin
                   ld_state=1'b1;
                   busy=1'b0;
                   write_enb_reg=1'b1;
                   laf_state=1'b0;
                   lfd_state=1'b0;
                   detect_add = 0;
                if((!fifo_full) && (!pkt_valid))
                  ns=LOAD_PARITY ; 
                else if(fifo_full)
                  ns=FIFO_FULL_STATE;
                else
                  ns=LOAD_DATA;
                end

LOAD_PARITY:
                begin
                   busy=1'b1;
                   write_enb_reg=1'b1;
                   ld_state=1'b0;
                   detect_add = 0;
                   lfd_state=1'b0;
                   laf_state=1'b0  ;
                   ns=CHECK_PARITY_ERROR;
                end

FIFO_FULL_STATE:
                begin
                   write_enb_reg=1'b0;
                   busy=1'b1;
                   full_state=1'b1;
                   lfd_state=1'b0;
                   ld_state=1'b0;
                   detect_add = 0;
                   laf_state=1'b0;
                if(!fifo_full)
                   ns=LOAD_AFTER_FULL;
                else
                   ns=FIFO_FULL_STATE;
                end

LOAD_AFTER_FULL:
                begin
                  laf_state=1'b1;
                  write_enb_reg=1'b1;
                  busy=1'b1;
                  ld_state=1'b0;
                  detect_add = 0;
                  lfd_state=1'b0;
                 
                 if(!parity_done)
                    begin
                     if(low_pkt_valid)
                        ns=LOAD_PARITY;
                     else
                        ns=LOAD_DATA;
                     end
                  else 
                      ns=DECODE_ADDRESS;
                 end

WAIT_TILL_EMPTY:
                 begin
                   busy=1'b1;
                   write_enb_reg=1'b0;
                   ld_state=1'b0;
                   lfd_state=1'b0;
                   detect_add = 0;
                   laf_state=1'b0;
                 if((fifo_empty_0 && (data_in[1:0]==0)) ||
                     (fifo_empty_1 && (data_in[1:0]==1)) ||
                     (fifo_empty_2 && (data_in[1:0]==2)))
                   ns=LOAD_FIRST_DATA;
                 else
                   ns=WAIT_TILL_EMPTY;
                 end

CHECK_PARITY_ERROR:
                  begin
                     busy=1'b1;
                     rst_int_reg=1'b1;
                     lfd_state=1'b0;
                     detect_add = 0;
                     ld_state=1'b0;
                     laf_state=1'b0;
                   if(!fifo_full)
                      ns=DECODE_ADDRESS;
                   else
                      ns=FIFO_FULL_STATE;
                   end
default: ns=DECODE_ADDRESS;

endcase
end

endmodule

