module router_top_tb;

reg clock,resetn,read_enb_0,read_enb_1,read_enb_2,pkt_valid;
reg[7:0]data_in;
wire [7:0]data_out_0,data_out_1,data_out_2;
wire  valid_out_0,valid_out_1,valid_out_2,err,busy;

router_top DUT(clock,resetn,read_enb_0,read_enb_1,read_enb_2,pkt_valid,data_in,
                       data_out_0,data_out_1,data_out_2,
                        valid_out_0,valid_out_1,valid_out_2,err,busy);

integer i;
event t1;

//============================================CLOCK GENERATION==========================================
initial
begin
   clock=0;
forever #5 clock=~clock;
end

//============================================RESET TASK================================================
task reset_t;
begin
@(negedge clock);
 resetn=0;
@(negedge clock);
 resetn=1;
end
endtask

//============================================PKT PAYLOAD_14 TASK==========================================
task pkt_gen_14;
 reg[7:0]payload_data,parity,header;
 reg[5:0]payload_length;
 reg[1:0]addr;
begin
  @(negedge clock);
  wait(~busy)
  @(negedge clock);
  payload_length=14;
  addr=2'b01;
  header={payload_length,addr};
  parity=0;
  data_in=header;
  pkt_valid=1;
  parity=parity^header;
  @(negedge clock);
  wait(~busy)
  for(i=0; i<payload_length; i=i+1)
  begin
    @(negedge clock);
    wait(~busy)
    payload_data={$random}%256;
    data_in=payload_data;
    parity=parity^payload_data;
  end
  @(negedge clock);
  wait(~busy)
  pkt_valid=0;
  data_in=parity;
end
endtask

//============================================PKT PAYLOAD_17 TASK==========================================
task pkt_gen_17;
 reg[7:0]payload_data,parity,header;
 reg[5:0]payload_length;
 reg[1:0]addr;
begin
  @(negedge clock);
  wait(~busy)
  @(negedge clock);
  payload_length=17;
  addr=2'b10;
  header={payload_length,addr};
  parity=0;
  data_in=header;
  pkt_valid=1;
  parity=parity^header;
  @(negedge clock);
  wait(~busy)
  for(i=0; i<payload_length; i=i+1)
  begin
    @(negedge clock);
    wait(~busy)
    payload_data={$random}%256;
    data_in=payload_data;
    parity=parity^payload_data;
  end
  @(negedge clock);
  ->t1;
  wait(~busy)
   @(negedge clock);
  pkt_valid=0;
  data_in=parity;
end
endtask


//============================================PKT PAYLOAD_16 TASK==========================================
task pkt_gen_16;
 reg[7:0]payload_data,parity,header;
 reg[5:0]payload_length;
 reg[1:0]addr;
begin
  @(negedge clock);
  wait(~busy)
  @(negedge clock);
  payload_length=16;
  addr=2'b01;
  header={payload_length,addr};
  parity=0;
  data_in=header;
  pkt_valid=1;
  parity=parity^header;
  @(negedge clock);
  wait(~busy)
  for(i=0; i<payload_length; i=i+1)
  begin
    @(negedge clock);
    wait(~busy)
    payload_data={$random}%256;
    data_in=payload_data;
    parity=parity^payload_data;
  end
  @(negedge clock);
  wait(~busy)
  pkt_valid=0;
  data_in=parity;
  ->t1;
end
endtask

/*
//============================================ PAYLOAD_14 TEST===========================================
initial
 begin
 reset_t;
 pkt_gen_14;
 repeat(2)
 @(negedge clock);
 read_enb_1=1;
 @(negedge clock);
 wait(~valid_out_1)
 read_enb_1=0;
 #500;
 $finish;
end


//============================================ PAYLOAD_17 TEST============================================
initial
 begin
 reset_t;
 fork
 pkt_gen_17;
 begin
 @(t1);
 @(negedge clock);
 read_enb_2=1;
 @(negedge clock);
 wait(~valid_out_2)
 @(negedge clock);
 read_enb_2=0;
 end
join
 #500;
 $finish;
end


//============================================ PAYLOAD_16 TEST============================================
initial
 begin
 reset_t;
 fork
 pkt_gen_16;
 begin
 @(t1);
 @(negedge clock);
 read_enb_2=1;
 @(negedge clock);
 wait(~valid_out_2)
 @(negedge clock);
 read_enb_2=0;
 end
join
 #500;
 $finish;
end
*/

//============================================FSM WAIT TILL EMPTY STATE TEST==========================================

initial
begin
 reset_t;
 pkt_gen_14;
 repeat(2)
 @(negedge clock);
 read_enb_1=1;
 @(negedge clock);


 fork
 pkt_gen_16;
 begin
 @(t1);
 @(negedge clock);
 read_enb_1=1;
 @(negedge clock);
 wait(~valid_out_1)
 @(negedge clock);
 read_enb_1=0;
 end
join
#500;
 $finish;
end

endmodule
