module router_reg_tb();

reg clock,
    resetn,
    pkt_valid,
    detect_add,
    ld_state,
    lfd_state,
    full_state,
    fifo_full,
    laf_state,
    rst_int_reg;

reg [7:0] data_in;

wire parity_done,low_pkt_valid,err;

wire [7:0]dout;

//dut instantiation

router_reg DUT( clock,resetn,pkt_valid,fifo_full,rst_int_reg,detect_add,ld_state,
                        laf_state,full_state,lfd_state,data_in,
                                parity_done,low_pkt_valid,err,dout);

//CLOCK generation
initial
    begin    
      clock = 1'b0;
    forever
      #5 clock = ~clock;
  end

//INITIALISE TASK
task initialize;
     begin
       resetn=1'b1;
        {clock,pkt_valid,detect_add,ld_state,lfd_state,full_state,fifo_full,laf_state,rst_int_reg,data_in}=0;
     end
endtask
   
   
//TASK RESET
task reset_t;
    begin
      @(negedge clock)
      resetn=1'b0;
     @(negedge clock)
      resetn=1'b1;
  end
endtask


//TASK GOOD Packet
task normal_packet;
  reg [7:0] payload_data,parity,header;
  reg [5:0] payload_len;
  reg [1:0] addr;
  integer i;
  begin

   @(negedge clock)
   payload_len=6'd6;
   addr=2'b01;//valid packet
   pkt_valid = 1'b1;
   detect_add = 1'b1;
   parity = 0;
   header={payload_len,addr};
   data_in=header;
   parity = parity ^ header;

   @(negedge clock)//header
   detect_add = 1'b0;
   lfd_state = 1'b1;
   full_state = 1'b0;
   fifo_full = 1'b0;
   laf_state = 1'b0;

   for(i=0;i<payload_len;i=i+1)//payload
    begin
     @(negedge clock);
     lfd_state = 1'b0;
     ld_state = 1'b1;
     payload_data={$random}%256;
     data_in=payload_data;
     parity = parity ^data_in;
    end
   @(negedge clock);//parity
    pkt_valid = 1'b0;
    data_in = parity;
    rst_int_reg = 1'b0;
   @(negedge clock)
    ld_state = 1'b0;
    rst_int_reg = 1'b1;
  end
  endtask
  
//TASK BAD Packet
task full_state_packet;
  reg [7:0] payload_data,parity,header;
  reg [5:0] payload_len;
  reg [1:0] addr;
  integer i;
  begin

   @(negedge clock)
   payload_len=6'd6;
   addr=2'b01;//valid packet
   pkt_valid = 1'b1;
   detect_add = 1'b1;
   parity = 0;
   header={payload_len,addr};
   data_in=header;
   parity = parity ^ header;

   @(negedge clock)//header
   detect_add = 1'b0;
   lfd_state = 1'b1;
   full_state = 1'b0;
   fifo_full = 1'b0;
   laf_state = 1'b0;

   for(i=0;i<payload_len;i=i+1)//payload
    begin
     @(negedge clock);
     lfd_state = 1'b0;
     ld_state = 1'b1;
     payload_data={$random}%256;
     data_in=payload_data;
     parity = parity ^data_in;
    end
    @(negedge clock);
     fifo_full = 1'b1;
     payload_data={$random}%256;
     data_in=payload_data;
     parity = parity ^data_in;
   
   repeat(2)
   @(negedge clock);//parity
    fifo_full = 1'b0;
    laf_state = 1'b1;
    pkt_valid = 1'b0;
    data_in = parity;
    rst_int_reg = 1'b0;
   @(negedge clock)
    ld_state = 1'b0;
    rst_int_reg = 1'b1;
  end
  endtask


initial
     begin
      initialize;
      reset_t;
      #10;
      normal_packet; 
      #20
      initialize;
      reset_t;
      #10;
      full_state_packet;
      #100;
      $finish;
     
  end
endmodule
