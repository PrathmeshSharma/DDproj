module router_sync (input clock,resetn,detect_add,empty_0,empty_1,empty_2,full_0,
                    full_1,full_2,read_enb_0,read_enb_1,read_enb_2,write_enb_reg, 
		    input [1:0] data_in, 
		    output vld_out_0,vld_out_1,vld_out_2,
		    output fifo_full,
		    output reg soft_reset_0,soft_reset_1,soft_reset_2,
		    output [2:0] write_enb);

//======================================INTERNAL SIGNALS===========================================
wire time_out_0,time_out_1,time_out_2;
reg [1:0] s_data;
reg [31:0] count_syn_0,count_syn_1,count_syn_2;

//======================================VALID OUT LOGIC============================================
assign vld_out_0 = ~empty_0;
assign vld_out_1 = ~empty_1;
assign vld_out_2 = ~empty_2;

//=======================================SOFT RESET LOGIC==========================================
//assign soft_reset_0=(read_enb_0)?1'b0:time_out_0;
//assign soft_reset_1=(read_enb_1)?1'b0:time_out_1;
//assign soft_reset_2=(read_enb_2)?1'b0:time_out_2;
always@(read_enb_0,time_out_0)
begin
if(read_enb_0)
 soft_reset_0=1'b0;
else
 soft_reset_0=time_out_0;
end 

always@(read_enb_1,time_out_1)
begin
if(read_enb_1)
 soft_reset_1=1'b0;
else
 soft_reset_1=time_out_1;
end
 
always@(read_enb_2,time_out_2)
begin
if(read_enb_2)
 soft_reset_2=1'b0;
else
 soft_reset_2=time_out_2;
end 
 
//========================================FIFO_FULL LOGIC===========================================
assign fifo_full = (s_data==2'b00)?full_0:(s_data==2'b01)?full_1:(s_data==2'b10)?full_2:1'b0;	

//========================================WRITE_ENB LOGIC===========================================
assign write_enb[0]=(s_data==2'b00)?write_enb_reg:1'b0;
assign write_enb[1]=(s_data==2'b01)?write_enb_reg:1'b0;
assign write_enb[2]=(s_data==2'b10)?write_enb_reg:1'b0;

//========================================COUNTER0 LOGIC============================================
always@(posedge clock)
begin
if (!resetn || count_syn_0>=30)
 count_syn_0<=0;
else if (!vld_out_0)
 count_syn_0<=0;
else if (read_enb_0)
 count_syn_0<=0;
else
  count_syn_0<=count_syn_0+1;
end

//========================================COUNTER1 LOGIC============================================
always@(posedge clock)
begin
if (!resetn || count_syn_1>=30)
 count_syn_1<=0;
else if (!vld_out_1)
 count_syn_1<=0;
else if (read_enb_1)
 count_syn_1<=0;
else
 count_syn_1<=count_syn_1+1;
end

//========================================COUNTER2 LOGIC===========================================
always@(posedge clock)
begin
if (!resetn || count_syn_2>=30)
 count_syn_2<=0;
else if (!vld_out_2)
 count_syn_2<=0;
else if (read_enb_2)
 count_syn_2<=0;
else
 count_syn_2<=count_syn_2+1;
end

//========================================TIME_OUT LOGIC===========================================
assign time_out_0=(count_syn_0==30)?1'b1:1'b0;
assign time_out_1=(count_syn_1==30)?1'b1:1'b0;
assign time_out_2=(count_syn_2==30)?1'b1:1'b0;

//=========================================S_DATA LOGIC============================================
always@(posedge clock)
begin
 if(detect_add)
 s_data<=data_in;
end 

endmodule

